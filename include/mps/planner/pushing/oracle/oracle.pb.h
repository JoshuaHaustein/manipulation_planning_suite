// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oracle.proto

#ifndef PROTOBUF_oracle_2eproto__INCLUDED
#define PROTOBUF_oracle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace oracle_communication {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_oracle_2eproto();
void protobuf_AssignDesc_oracle_2eproto();
void protobuf_ShutdownFile_oracle_2eproto();

class ActionRequest;
class ActionResponse;
class FeasibilityRequest;
class FeasibilityResponse;
class FeasibilitySampleRequest;
class FeasibilitySampleResponse;
class PushabilityRequest;
class PushabilityResponse;

// ===================================================================

class ActionRequest : public ::google::protobuf::Message {
 public:
  ActionRequest();
  virtual ~ActionRequest();

  ActionRequest(const ActionRequest& from);

  inline ActionRequest& operator=(const ActionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionRequest& default_instance();

  void Swap(ActionRequest* other);

  // implements Message ----------------------------------------------

  ActionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionRequest& from);
  void MergeFrom(const ActionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float robot_relative_x = 1;
  inline bool has_robot_relative_x() const;
  inline void clear_robot_relative_x();
  static const int kRobotRelativeXFieldNumber = 1;
  inline float robot_relative_x() const;
  inline void set_robot_relative_x(float value);

  // required float robot_relative_y = 2;
  inline bool has_robot_relative_y() const;
  inline void clear_robot_relative_y();
  static const int kRobotRelativeYFieldNumber = 2;
  inline float robot_relative_y() const;
  inline void set_robot_relative_y(float value);

  // required float robot_radians = 3;
  inline bool has_robot_radians() const;
  inline void clear_robot_radians();
  static const int kRobotRadiansFieldNumber = 3;
  inline float robot_radians() const;
  inline void set_robot_radians(float value);

  // required float object_radians = 4;
  inline bool has_object_radians() const;
  inline void clear_object_radians();
  static const int kObjectRadiansFieldNumber = 4;
  inline float object_radians() const;
  inline void set_object_radians(float value);

  // required float object_relative_x_prime = 5;
  inline bool has_object_relative_x_prime() const;
  inline void clear_object_relative_x_prime();
  static const int kObjectRelativeXPrimeFieldNumber = 5;
  inline float object_relative_x_prime() const;
  inline void set_object_relative_x_prime(float value);

  // required float object_relative_y_prime = 6;
  inline bool has_object_relative_y_prime() const;
  inline void clear_object_relative_y_prime();
  static const int kObjectRelativeYPrimeFieldNumber = 6;
  inline float object_relative_y_prime() const;
  inline void set_object_relative_y_prime(float value);

  // required float object_radians_prime = 7;
  inline bool has_object_radians_prime() const;
  inline void clear_object_radians_prime();
  static const int kObjectRadiansPrimeFieldNumber = 7;
  inline float object_radians_prime() const;
  inline void set_object_radians_prime(float value);

  // @@protoc_insertion_point(class_scope:oracle_communication.ActionRequest)
 private:
  inline void set_has_robot_relative_x();
  inline void clear_has_robot_relative_x();
  inline void set_has_robot_relative_y();
  inline void clear_has_robot_relative_y();
  inline void set_has_robot_radians();
  inline void clear_has_robot_radians();
  inline void set_has_object_radians();
  inline void clear_has_object_radians();
  inline void set_has_object_relative_x_prime();
  inline void clear_has_object_relative_x_prime();
  inline void set_has_object_relative_y_prime();
  inline void clear_has_object_relative_y_prime();
  inline void set_has_object_radians_prime();
  inline void clear_has_object_radians_prime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float robot_relative_x_;
  float robot_relative_y_;
  float robot_radians_;
  float object_radians_;
  float object_relative_x_prime_;
  float object_relative_y_prime_;
  float object_radians_prime_;
  friend void  protobuf_AddDesc_oracle_2eproto();
  friend void protobuf_AssignDesc_oracle_2eproto();
  friend void protobuf_ShutdownFile_oracle_2eproto();

  void InitAsDefaultInstance();
  static ActionRequest* default_instance_;
};
// -------------------------------------------------------------------

class ActionResponse : public ::google::protobuf::Message {
 public:
  ActionResponse();
  virtual ~ActionResponse();

  ActionResponse(const ActionResponse& from);

  inline ActionResponse& operator=(const ActionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionResponse& default_instance();

  void Swap(ActionResponse* other);

  // implements Message ----------------------------------------------

  ActionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionResponse& from);
  void MergeFrom(const ActionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float dx = 1;
  inline bool has_dx() const;
  inline void clear_dx();
  static const int kDxFieldNumber = 1;
  inline float dx() const;
  inline void set_dx(float value);

  // required float dy = 2;
  inline bool has_dy() const;
  inline void clear_dy();
  static const int kDyFieldNumber = 2;
  inline float dy() const;
  inline void set_dy(float value);

  // required float dr = 3;
  inline bool has_dr() const;
  inline void clear_dr();
  static const int kDrFieldNumber = 3;
  inline float dr() const;
  inline void set_dr(float value);

  // required float t = 4;
  inline bool has_t() const;
  inline void clear_t();
  static const int kTFieldNumber = 4;
  inline float t() const;
  inline void set_t(float value);

  // @@protoc_insertion_point(class_scope:oracle_communication.ActionResponse)
 private:
  inline void set_has_dx();
  inline void clear_has_dx();
  inline void set_has_dy();
  inline void clear_has_dy();
  inline void set_has_dr();
  inline void clear_has_dr();
  inline void set_has_t();
  inline void clear_has_t();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float dx_;
  float dy_;
  float dr_;
  float t_;
  friend void  protobuf_AddDesc_oracle_2eproto();
  friend void protobuf_AssignDesc_oracle_2eproto();
  friend void protobuf_ShutdownFile_oracle_2eproto();

  void InitAsDefaultInstance();
  static ActionResponse* default_instance_;
};
// -------------------------------------------------------------------

class FeasibilityRequest : public ::google::protobuf::Message {
 public:
  FeasibilityRequest();
  virtual ~FeasibilityRequest();

  FeasibilityRequest(const FeasibilityRequest& from);

  inline FeasibilityRequest& operator=(const FeasibilityRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeasibilityRequest& default_instance();

  void Swap(FeasibilityRequest* other);

  // implements Message ----------------------------------------------

  FeasibilityRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeasibilityRequest& from);
  void MergeFrom(const FeasibilityRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float robot_relative_x = 1;
  inline bool has_robot_relative_x() const;
  inline void clear_robot_relative_x();
  static const int kRobotRelativeXFieldNumber = 1;
  inline float robot_relative_x() const;
  inline void set_robot_relative_x(float value);

  // required float robot_relative_y = 2;
  inline bool has_robot_relative_y() const;
  inline void clear_robot_relative_y();
  static const int kRobotRelativeYFieldNumber = 2;
  inline float robot_relative_y() const;
  inline void set_robot_relative_y(float value);

  // required float robot_radians = 3;
  inline bool has_robot_radians() const;
  inline void clear_robot_radians();
  static const int kRobotRadiansFieldNumber = 3;
  inline float robot_radians() const;
  inline void set_robot_radians(float value);

  // required float object_radians = 4;
  inline bool has_object_radians() const;
  inline void clear_object_radians();
  static const int kObjectRadiansFieldNumber = 4;
  inline float object_radians() const;
  inline void set_object_radians(float value);

  // required float object_relative_x_prime = 5;
  inline bool has_object_relative_x_prime() const;
  inline void clear_object_relative_x_prime();
  static const int kObjectRelativeXPrimeFieldNumber = 5;
  inline float object_relative_x_prime() const;
  inline void set_object_relative_x_prime(float value);

  // required float object_relative_y_prime = 6;
  inline bool has_object_relative_y_prime() const;
  inline void clear_object_relative_y_prime();
  static const int kObjectRelativeYPrimeFieldNumber = 6;
  inline float object_relative_y_prime() const;
  inline void set_object_relative_y_prime(float value);

  // required float object_radians_prime = 7;
  inline bool has_object_radians_prime() const;
  inline void clear_object_radians_prime();
  static const int kObjectRadiansPrimeFieldNumber = 7;
  inline float object_radians_prime() const;
  inline void set_object_radians_prime(float value);

  // @@protoc_insertion_point(class_scope:oracle_communication.FeasibilityRequest)
 private:
  inline void set_has_robot_relative_x();
  inline void clear_has_robot_relative_x();
  inline void set_has_robot_relative_y();
  inline void clear_has_robot_relative_y();
  inline void set_has_robot_radians();
  inline void clear_has_robot_radians();
  inline void set_has_object_radians();
  inline void clear_has_object_radians();
  inline void set_has_object_relative_x_prime();
  inline void clear_has_object_relative_x_prime();
  inline void set_has_object_relative_y_prime();
  inline void clear_has_object_relative_y_prime();
  inline void set_has_object_radians_prime();
  inline void clear_has_object_radians_prime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float robot_relative_x_;
  float robot_relative_y_;
  float robot_radians_;
  float object_radians_;
  float object_relative_x_prime_;
  float object_relative_y_prime_;
  float object_radians_prime_;
  friend void  protobuf_AddDesc_oracle_2eproto();
  friend void protobuf_AssignDesc_oracle_2eproto();
  friend void protobuf_ShutdownFile_oracle_2eproto();

  void InitAsDefaultInstance();
  static FeasibilityRequest* default_instance_;
};
// -------------------------------------------------------------------

class FeasibilityResponse : public ::google::protobuf::Message {
 public:
  FeasibilityResponse();
  virtual ~FeasibilityResponse();

  FeasibilityResponse(const FeasibilityResponse& from);

  inline FeasibilityResponse& operator=(const FeasibilityResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeasibilityResponse& default_instance();

  void Swap(FeasibilityResponse* other);

  // implements Message ----------------------------------------------

  FeasibilityResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeasibilityResponse& from);
  void MergeFrom(const FeasibilityResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float mahalanobis = 1;
  inline bool has_mahalanobis() const;
  inline void clear_mahalanobis();
  static const int kMahalanobisFieldNumber = 1;
  inline float mahalanobis() const;
  inline void set_mahalanobis(float value);

  // @@protoc_insertion_point(class_scope:oracle_communication.FeasibilityResponse)
 private:
  inline void set_has_mahalanobis();
  inline void clear_has_mahalanobis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float mahalanobis_;
  friend void  protobuf_AddDesc_oracle_2eproto();
  friend void protobuf_AssignDesc_oracle_2eproto();
  friend void protobuf_ShutdownFile_oracle_2eproto();

  void InitAsDefaultInstance();
  static FeasibilityResponse* default_instance_;
};
// -------------------------------------------------------------------

class FeasibilitySampleRequest : public ::google::protobuf::Message {
 public:
  FeasibilitySampleRequest();
  virtual ~FeasibilitySampleRequest();

  FeasibilitySampleRequest(const FeasibilitySampleRequest& from);

  inline FeasibilitySampleRequest& operator=(const FeasibilitySampleRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeasibilitySampleRequest& default_instance();

  void Swap(FeasibilitySampleRequest* other);

  // implements Message ----------------------------------------------

  FeasibilitySampleRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeasibilitySampleRequest& from);
  void MergeFrom(const FeasibilitySampleRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float object_radians = 1;
  inline bool has_object_radians() const;
  inline void clear_object_radians();
  static const int kObjectRadiansFieldNumber = 1;
  inline float object_radians() const;
  inline void set_object_radians(float value);

  // required float object_relative_x_prime = 2;
  inline bool has_object_relative_x_prime() const;
  inline void clear_object_relative_x_prime();
  static const int kObjectRelativeXPrimeFieldNumber = 2;
  inline float object_relative_x_prime() const;
  inline void set_object_relative_x_prime(float value);

  // required float object_relative_y_prime = 3;
  inline bool has_object_relative_y_prime() const;
  inline void clear_object_relative_y_prime();
  static const int kObjectRelativeYPrimeFieldNumber = 3;
  inline float object_relative_y_prime() const;
  inline void set_object_relative_y_prime(float value);

  // required float object_radians_prime = 4;
  inline bool has_object_radians_prime() const;
  inline void clear_object_radians_prime();
  static const int kObjectRadiansPrimeFieldNumber = 4;
  inline float object_radians_prime() const;
  inline void set_object_radians_prime(float value);

  // @@protoc_insertion_point(class_scope:oracle_communication.FeasibilitySampleRequest)
 private:
  inline void set_has_object_radians();
  inline void clear_has_object_radians();
  inline void set_has_object_relative_x_prime();
  inline void clear_has_object_relative_x_prime();
  inline void set_has_object_relative_y_prime();
  inline void clear_has_object_relative_y_prime();
  inline void set_has_object_radians_prime();
  inline void clear_has_object_radians_prime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float object_radians_;
  float object_relative_x_prime_;
  float object_relative_y_prime_;
  float object_radians_prime_;
  friend void  protobuf_AddDesc_oracle_2eproto();
  friend void protobuf_AssignDesc_oracle_2eproto();
  friend void protobuf_ShutdownFile_oracle_2eproto();

  void InitAsDefaultInstance();
  static FeasibilitySampleRequest* default_instance_;
};
// -------------------------------------------------------------------

class FeasibilitySampleResponse : public ::google::protobuf::Message {
 public:
  FeasibilitySampleResponse();
  virtual ~FeasibilitySampleResponse();

  FeasibilitySampleResponse(const FeasibilitySampleResponse& from);

  inline FeasibilitySampleResponse& operator=(const FeasibilitySampleResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeasibilitySampleResponse& default_instance();

  void Swap(FeasibilitySampleResponse* other);

  // implements Message ----------------------------------------------

  FeasibilitySampleResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeasibilitySampleResponse& from);
  void MergeFrom(const FeasibilitySampleResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float robot_relative_x = 1;
  inline bool has_robot_relative_x() const;
  inline void clear_robot_relative_x();
  static const int kRobotRelativeXFieldNumber = 1;
  inline float robot_relative_x() const;
  inline void set_robot_relative_x(float value);

  // required float robot_relative_y = 2;
  inline bool has_robot_relative_y() const;
  inline void clear_robot_relative_y();
  static const int kRobotRelativeYFieldNumber = 2;
  inline float robot_relative_y() const;
  inline void set_robot_relative_y(float value);

  // required float robot_radians = 3;
  inline bool has_robot_radians() const;
  inline void clear_robot_radians();
  static const int kRobotRadiansFieldNumber = 3;
  inline float robot_radians() const;
  inline void set_robot_radians(float value);

  // @@protoc_insertion_point(class_scope:oracle_communication.FeasibilitySampleResponse)
 private:
  inline void set_has_robot_relative_x();
  inline void clear_has_robot_relative_x();
  inline void set_has_robot_relative_y();
  inline void clear_has_robot_relative_y();
  inline void set_has_robot_radians();
  inline void clear_has_robot_radians();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float robot_relative_x_;
  float robot_relative_y_;
  float robot_radians_;
  friend void  protobuf_AddDesc_oracle_2eproto();
  friend void protobuf_AssignDesc_oracle_2eproto();
  friend void protobuf_ShutdownFile_oracle_2eproto();

  void InitAsDefaultInstance();
  static FeasibilitySampleResponse* default_instance_;
};
// -------------------------------------------------------------------

class PushabilityRequest : public ::google::protobuf::Message {
 public:
  PushabilityRequest();
  virtual ~PushabilityRequest();

  PushabilityRequest(const PushabilityRequest& from);

  inline PushabilityRequest& operator=(const PushabilityRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushabilityRequest& default_instance();

  void Swap(PushabilityRequest* other);

  // implements Message ----------------------------------------------

  PushabilityRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushabilityRequest& from);
  void MergeFrom(const PushabilityRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float object_radians = 4;
  inline bool has_object_radians() const;
  inline void clear_object_radians();
  static const int kObjectRadiansFieldNumber = 4;
  inline float object_radians() const;
  inline void set_object_radians(float value);

  // required float object_relative_x_prime = 5;
  inline bool has_object_relative_x_prime() const;
  inline void clear_object_relative_x_prime();
  static const int kObjectRelativeXPrimeFieldNumber = 5;
  inline float object_relative_x_prime() const;
  inline void set_object_relative_x_prime(float value);

  // required float object_relative_y_prime = 6;
  inline bool has_object_relative_y_prime() const;
  inline void clear_object_relative_y_prime();
  static const int kObjectRelativeYPrimeFieldNumber = 6;
  inline float object_relative_y_prime() const;
  inline void set_object_relative_y_prime(float value);

  // required float object_radians_prime = 7;
  inline bool has_object_radians_prime() const;
  inline void clear_object_radians_prime();
  static const int kObjectRadiansPrimeFieldNumber = 7;
  inline float object_radians_prime() const;
  inline void set_object_radians_prime(float value);

  // @@protoc_insertion_point(class_scope:oracle_communication.PushabilityRequest)
 private:
  inline void set_has_object_radians();
  inline void clear_has_object_radians();
  inline void set_has_object_relative_x_prime();
  inline void clear_has_object_relative_x_prime();
  inline void set_has_object_relative_y_prime();
  inline void clear_has_object_relative_y_prime();
  inline void set_has_object_radians_prime();
  inline void clear_has_object_radians_prime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float object_radians_;
  float object_relative_x_prime_;
  float object_relative_y_prime_;
  float object_radians_prime_;
  friend void  protobuf_AddDesc_oracle_2eproto();
  friend void protobuf_AssignDesc_oracle_2eproto();
  friend void protobuf_ShutdownFile_oracle_2eproto();

  void InitAsDefaultInstance();
  static PushabilityRequest* default_instance_;
};
// -------------------------------------------------------------------

class PushabilityResponse : public ::google::protobuf::Message {
 public:
  PushabilityResponse();
  virtual ~PushabilityResponse();

  PushabilityResponse(const PushabilityResponse& from);

  inline PushabilityResponse& operator=(const PushabilityResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushabilityResponse& default_instance();

  void Swap(PushabilityResponse* other);

  // implements Message ----------------------------------------------

  PushabilityResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushabilityResponse& from);
  void MergeFrom(const PushabilityResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float mahalanobis = 1;
  inline bool has_mahalanobis() const;
  inline void clear_mahalanobis();
  static const int kMahalanobisFieldNumber = 1;
  inline float mahalanobis() const;
  inline void set_mahalanobis(float value);

  // @@protoc_insertion_point(class_scope:oracle_communication.PushabilityResponse)
 private:
  inline void set_has_mahalanobis();
  inline void clear_has_mahalanobis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float mahalanobis_;
  friend void  protobuf_AddDesc_oracle_2eproto();
  friend void protobuf_AssignDesc_oracle_2eproto();
  friend void protobuf_ShutdownFile_oracle_2eproto();

  void InitAsDefaultInstance();
  static PushabilityResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ActionRequest

// required float robot_relative_x = 1;
inline bool ActionRequest::has_robot_relative_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionRequest::set_has_robot_relative_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionRequest::clear_has_robot_relative_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionRequest::clear_robot_relative_x() {
  robot_relative_x_ = 0;
  clear_has_robot_relative_x();
}
inline float ActionRequest::robot_relative_x() const {
  // @@protoc_insertion_point(field_get:oracle_communication.ActionRequest.robot_relative_x)
  return robot_relative_x_;
}
inline void ActionRequest::set_robot_relative_x(float value) {
  set_has_robot_relative_x();
  robot_relative_x_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.ActionRequest.robot_relative_x)
}

// required float robot_relative_y = 2;
inline bool ActionRequest::has_robot_relative_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionRequest::set_has_robot_relative_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionRequest::clear_has_robot_relative_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionRequest::clear_robot_relative_y() {
  robot_relative_y_ = 0;
  clear_has_robot_relative_y();
}
inline float ActionRequest::robot_relative_y() const {
  // @@protoc_insertion_point(field_get:oracle_communication.ActionRequest.robot_relative_y)
  return robot_relative_y_;
}
inline void ActionRequest::set_robot_relative_y(float value) {
  set_has_robot_relative_y();
  robot_relative_y_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.ActionRequest.robot_relative_y)
}

// required float robot_radians = 3;
inline bool ActionRequest::has_robot_radians() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionRequest::set_has_robot_radians() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActionRequest::clear_has_robot_radians() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActionRequest::clear_robot_radians() {
  robot_radians_ = 0;
  clear_has_robot_radians();
}
inline float ActionRequest::robot_radians() const {
  // @@protoc_insertion_point(field_get:oracle_communication.ActionRequest.robot_radians)
  return robot_radians_;
}
inline void ActionRequest::set_robot_radians(float value) {
  set_has_robot_radians();
  robot_radians_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.ActionRequest.robot_radians)
}

// required float object_radians = 4;
inline bool ActionRequest::has_object_radians() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActionRequest::set_has_object_radians() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActionRequest::clear_has_object_radians() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActionRequest::clear_object_radians() {
  object_radians_ = 0;
  clear_has_object_radians();
}
inline float ActionRequest::object_radians() const {
  // @@protoc_insertion_point(field_get:oracle_communication.ActionRequest.object_radians)
  return object_radians_;
}
inline void ActionRequest::set_object_radians(float value) {
  set_has_object_radians();
  object_radians_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.ActionRequest.object_radians)
}

// required float object_relative_x_prime = 5;
inline bool ActionRequest::has_object_relative_x_prime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActionRequest::set_has_object_relative_x_prime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ActionRequest::clear_has_object_relative_x_prime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ActionRequest::clear_object_relative_x_prime() {
  object_relative_x_prime_ = 0;
  clear_has_object_relative_x_prime();
}
inline float ActionRequest::object_relative_x_prime() const {
  // @@protoc_insertion_point(field_get:oracle_communication.ActionRequest.object_relative_x_prime)
  return object_relative_x_prime_;
}
inline void ActionRequest::set_object_relative_x_prime(float value) {
  set_has_object_relative_x_prime();
  object_relative_x_prime_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.ActionRequest.object_relative_x_prime)
}

// required float object_relative_y_prime = 6;
inline bool ActionRequest::has_object_relative_y_prime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ActionRequest::set_has_object_relative_y_prime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ActionRequest::clear_has_object_relative_y_prime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ActionRequest::clear_object_relative_y_prime() {
  object_relative_y_prime_ = 0;
  clear_has_object_relative_y_prime();
}
inline float ActionRequest::object_relative_y_prime() const {
  // @@protoc_insertion_point(field_get:oracle_communication.ActionRequest.object_relative_y_prime)
  return object_relative_y_prime_;
}
inline void ActionRequest::set_object_relative_y_prime(float value) {
  set_has_object_relative_y_prime();
  object_relative_y_prime_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.ActionRequest.object_relative_y_prime)
}

// required float object_radians_prime = 7;
inline bool ActionRequest::has_object_radians_prime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ActionRequest::set_has_object_radians_prime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ActionRequest::clear_has_object_radians_prime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ActionRequest::clear_object_radians_prime() {
  object_radians_prime_ = 0;
  clear_has_object_radians_prime();
}
inline float ActionRequest::object_radians_prime() const {
  // @@protoc_insertion_point(field_get:oracle_communication.ActionRequest.object_radians_prime)
  return object_radians_prime_;
}
inline void ActionRequest::set_object_radians_prime(float value) {
  set_has_object_radians_prime();
  object_radians_prime_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.ActionRequest.object_radians_prime)
}

// -------------------------------------------------------------------

// ActionResponse

// required float dx = 1;
inline bool ActionResponse::has_dx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionResponse::set_has_dx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionResponse::clear_has_dx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionResponse::clear_dx() {
  dx_ = 0;
  clear_has_dx();
}
inline float ActionResponse::dx() const {
  // @@protoc_insertion_point(field_get:oracle_communication.ActionResponse.dx)
  return dx_;
}
inline void ActionResponse::set_dx(float value) {
  set_has_dx();
  dx_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.ActionResponse.dx)
}

// required float dy = 2;
inline bool ActionResponse::has_dy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionResponse::set_has_dy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionResponse::clear_has_dy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionResponse::clear_dy() {
  dy_ = 0;
  clear_has_dy();
}
inline float ActionResponse::dy() const {
  // @@protoc_insertion_point(field_get:oracle_communication.ActionResponse.dy)
  return dy_;
}
inline void ActionResponse::set_dy(float value) {
  set_has_dy();
  dy_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.ActionResponse.dy)
}

// required float dr = 3;
inline bool ActionResponse::has_dr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionResponse::set_has_dr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActionResponse::clear_has_dr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActionResponse::clear_dr() {
  dr_ = 0;
  clear_has_dr();
}
inline float ActionResponse::dr() const {
  // @@protoc_insertion_point(field_get:oracle_communication.ActionResponse.dr)
  return dr_;
}
inline void ActionResponse::set_dr(float value) {
  set_has_dr();
  dr_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.ActionResponse.dr)
}

// required float t = 4;
inline bool ActionResponse::has_t() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActionResponse::set_has_t() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActionResponse::clear_has_t() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActionResponse::clear_t() {
  t_ = 0;
  clear_has_t();
}
inline float ActionResponse::t() const {
  // @@protoc_insertion_point(field_get:oracle_communication.ActionResponse.t)
  return t_;
}
inline void ActionResponse::set_t(float value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.ActionResponse.t)
}

// -------------------------------------------------------------------

// FeasibilityRequest

// required float robot_relative_x = 1;
inline bool FeasibilityRequest::has_robot_relative_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeasibilityRequest::set_has_robot_relative_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeasibilityRequest::clear_has_robot_relative_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeasibilityRequest::clear_robot_relative_x() {
  robot_relative_x_ = 0;
  clear_has_robot_relative_x();
}
inline float FeasibilityRequest::robot_relative_x() const {
  // @@protoc_insertion_point(field_get:oracle_communication.FeasibilityRequest.robot_relative_x)
  return robot_relative_x_;
}
inline void FeasibilityRequest::set_robot_relative_x(float value) {
  set_has_robot_relative_x();
  robot_relative_x_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.FeasibilityRequest.robot_relative_x)
}

// required float robot_relative_y = 2;
inline bool FeasibilityRequest::has_robot_relative_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeasibilityRequest::set_has_robot_relative_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeasibilityRequest::clear_has_robot_relative_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeasibilityRequest::clear_robot_relative_y() {
  robot_relative_y_ = 0;
  clear_has_robot_relative_y();
}
inline float FeasibilityRequest::robot_relative_y() const {
  // @@protoc_insertion_point(field_get:oracle_communication.FeasibilityRequest.robot_relative_y)
  return robot_relative_y_;
}
inline void FeasibilityRequest::set_robot_relative_y(float value) {
  set_has_robot_relative_y();
  robot_relative_y_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.FeasibilityRequest.robot_relative_y)
}

// required float robot_radians = 3;
inline bool FeasibilityRequest::has_robot_radians() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeasibilityRequest::set_has_robot_radians() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeasibilityRequest::clear_has_robot_radians() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeasibilityRequest::clear_robot_radians() {
  robot_radians_ = 0;
  clear_has_robot_radians();
}
inline float FeasibilityRequest::robot_radians() const {
  // @@protoc_insertion_point(field_get:oracle_communication.FeasibilityRequest.robot_radians)
  return robot_radians_;
}
inline void FeasibilityRequest::set_robot_radians(float value) {
  set_has_robot_radians();
  robot_radians_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.FeasibilityRequest.robot_radians)
}

// required float object_radians = 4;
inline bool FeasibilityRequest::has_object_radians() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FeasibilityRequest::set_has_object_radians() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FeasibilityRequest::clear_has_object_radians() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FeasibilityRequest::clear_object_radians() {
  object_radians_ = 0;
  clear_has_object_radians();
}
inline float FeasibilityRequest::object_radians() const {
  // @@protoc_insertion_point(field_get:oracle_communication.FeasibilityRequest.object_radians)
  return object_radians_;
}
inline void FeasibilityRequest::set_object_radians(float value) {
  set_has_object_radians();
  object_radians_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.FeasibilityRequest.object_radians)
}

// required float object_relative_x_prime = 5;
inline bool FeasibilityRequest::has_object_relative_x_prime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FeasibilityRequest::set_has_object_relative_x_prime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FeasibilityRequest::clear_has_object_relative_x_prime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FeasibilityRequest::clear_object_relative_x_prime() {
  object_relative_x_prime_ = 0;
  clear_has_object_relative_x_prime();
}
inline float FeasibilityRequest::object_relative_x_prime() const {
  // @@protoc_insertion_point(field_get:oracle_communication.FeasibilityRequest.object_relative_x_prime)
  return object_relative_x_prime_;
}
inline void FeasibilityRequest::set_object_relative_x_prime(float value) {
  set_has_object_relative_x_prime();
  object_relative_x_prime_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.FeasibilityRequest.object_relative_x_prime)
}

// required float object_relative_y_prime = 6;
inline bool FeasibilityRequest::has_object_relative_y_prime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FeasibilityRequest::set_has_object_relative_y_prime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FeasibilityRequest::clear_has_object_relative_y_prime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FeasibilityRequest::clear_object_relative_y_prime() {
  object_relative_y_prime_ = 0;
  clear_has_object_relative_y_prime();
}
inline float FeasibilityRequest::object_relative_y_prime() const {
  // @@protoc_insertion_point(field_get:oracle_communication.FeasibilityRequest.object_relative_y_prime)
  return object_relative_y_prime_;
}
inline void FeasibilityRequest::set_object_relative_y_prime(float value) {
  set_has_object_relative_y_prime();
  object_relative_y_prime_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.FeasibilityRequest.object_relative_y_prime)
}

// required float object_radians_prime = 7;
inline bool FeasibilityRequest::has_object_radians_prime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FeasibilityRequest::set_has_object_radians_prime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FeasibilityRequest::clear_has_object_radians_prime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FeasibilityRequest::clear_object_radians_prime() {
  object_radians_prime_ = 0;
  clear_has_object_radians_prime();
}
inline float FeasibilityRequest::object_radians_prime() const {
  // @@protoc_insertion_point(field_get:oracle_communication.FeasibilityRequest.object_radians_prime)
  return object_radians_prime_;
}
inline void FeasibilityRequest::set_object_radians_prime(float value) {
  set_has_object_radians_prime();
  object_radians_prime_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.FeasibilityRequest.object_radians_prime)
}

// -------------------------------------------------------------------

// FeasibilityResponse

// required float mahalanobis = 1;
inline bool FeasibilityResponse::has_mahalanobis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeasibilityResponse::set_has_mahalanobis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeasibilityResponse::clear_has_mahalanobis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeasibilityResponse::clear_mahalanobis() {
  mahalanobis_ = 0;
  clear_has_mahalanobis();
}
inline float FeasibilityResponse::mahalanobis() const {
  // @@protoc_insertion_point(field_get:oracle_communication.FeasibilityResponse.mahalanobis)
  return mahalanobis_;
}
inline void FeasibilityResponse::set_mahalanobis(float value) {
  set_has_mahalanobis();
  mahalanobis_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.FeasibilityResponse.mahalanobis)
}

// -------------------------------------------------------------------

// FeasibilitySampleRequest

// required float object_radians = 1;
inline bool FeasibilitySampleRequest::has_object_radians() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeasibilitySampleRequest::set_has_object_radians() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeasibilitySampleRequest::clear_has_object_radians() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeasibilitySampleRequest::clear_object_radians() {
  object_radians_ = 0;
  clear_has_object_radians();
}
inline float FeasibilitySampleRequest::object_radians() const {
  // @@protoc_insertion_point(field_get:oracle_communication.FeasibilitySampleRequest.object_radians)
  return object_radians_;
}
inline void FeasibilitySampleRequest::set_object_radians(float value) {
  set_has_object_radians();
  object_radians_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.FeasibilitySampleRequest.object_radians)
}

// required float object_relative_x_prime = 2;
inline bool FeasibilitySampleRequest::has_object_relative_x_prime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeasibilitySampleRequest::set_has_object_relative_x_prime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeasibilitySampleRequest::clear_has_object_relative_x_prime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeasibilitySampleRequest::clear_object_relative_x_prime() {
  object_relative_x_prime_ = 0;
  clear_has_object_relative_x_prime();
}
inline float FeasibilitySampleRequest::object_relative_x_prime() const {
  // @@protoc_insertion_point(field_get:oracle_communication.FeasibilitySampleRequest.object_relative_x_prime)
  return object_relative_x_prime_;
}
inline void FeasibilitySampleRequest::set_object_relative_x_prime(float value) {
  set_has_object_relative_x_prime();
  object_relative_x_prime_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.FeasibilitySampleRequest.object_relative_x_prime)
}

// required float object_relative_y_prime = 3;
inline bool FeasibilitySampleRequest::has_object_relative_y_prime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeasibilitySampleRequest::set_has_object_relative_y_prime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeasibilitySampleRequest::clear_has_object_relative_y_prime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeasibilitySampleRequest::clear_object_relative_y_prime() {
  object_relative_y_prime_ = 0;
  clear_has_object_relative_y_prime();
}
inline float FeasibilitySampleRequest::object_relative_y_prime() const {
  // @@protoc_insertion_point(field_get:oracle_communication.FeasibilitySampleRequest.object_relative_y_prime)
  return object_relative_y_prime_;
}
inline void FeasibilitySampleRequest::set_object_relative_y_prime(float value) {
  set_has_object_relative_y_prime();
  object_relative_y_prime_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.FeasibilitySampleRequest.object_relative_y_prime)
}

// required float object_radians_prime = 4;
inline bool FeasibilitySampleRequest::has_object_radians_prime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FeasibilitySampleRequest::set_has_object_radians_prime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FeasibilitySampleRequest::clear_has_object_radians_prime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FeasibilitySampleRequest::clear_object_radians_prime() {
  object_radians_prime_ = 0;
  clear_has_object_radians_prime();
}
inline float FeasibilitySampleRequest::object_radians_prime() const {
  // @@protoc_insertion_point(field_get:oracle_communication.FeasibilitySampleRequest.object_radians_prime)
  return object_radians_prime_;
}
inline void FeasibilitySampleRequest::set_object_radians_prime(float value) {
  set_has_object_radians_prime();
  object_radians_prime_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.FeasibilitySampleRequest.object_radians_prime)
}

// -------------------------------------------------------------------

// FeasibilitySampleResponse

// required float robot_relative_x = 1;
inline bool FeasibilitySampleResponse::has_robot_relative_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeasibilitySampleResponse::set_has_robot_relative_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeasibilitySampleResponse::clear_has_robot_relative_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeasibilitySampleResponse::clear_robot_relative_x() {
  robot_relative_x_ = 0;
  clear_has_robot_relative_x();
}
inline float FeasibilitySampleResponse::robot_relative_x() const {
  // @@protoc_insertion_point(field_get:oracle_communication.FeasibilitySampleResponse.robot_relative_x)
  return robot_relative_x_;
}
inline void FeasibilitySampleResponse::set_robot_relative_x(float value) {
  set_has_robot_relative_x();
  robot_relative_x_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.FeasibilitySampleResponse.robot_relative_x)
}

// required float robot_relative_y = 2;
inline bool FeasibilitySampleResponse::has_robot_relative_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeasibilitySampleResponse::set_has_robot_relative_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeasibilitySampleResponse::clear_has_robot_relative_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeasibilitySampleResponse::clear_robot_relative_y() {
  robot_relative_y_ = 0;
  clear_has_robot_relative_y();
}
inline float FeasibilitySampleResponse::robot_relative_y() const {
  // @@protoc_insertion_point(field_get:oracle_communication.FeasibilitySampleResponse.robot_relative_y)
  return robot_relative_y_;
}
inline void FeasibilitySampleResponse::set_robot_relative_y(float value) {
  set_has_robot_relative_y();
  robot_relative_y_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.FeasibilitySampleResponse.robot_relative_y)
}

// required float robot_radians = 3;
inline bool FeasibilitySampleResponse::has_robot_radians() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeasibilitySampleResponse::set_has_robot_radians() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeasibilitySampleResponse::clear_has_robot_radians() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeasibilitySampleResponse::clear_robot_radians() {
  robot_radians_ = 0;
  clear_has_robot_radians();
}
inline float FeasibilitySampleResponse::robot_radians() const {
  // @@protoc_insertion_point(field_get:oracle_communication.FeasibilitySampleResponse.robot_radians)
  return robot_radians_;
}
inline void FeasibilitySampleResponse::set_robot_radians(float value) {
  set_has_robot_radians();
  robot_radians_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.FeasibilitySampleResponse.robot_radians)
}

// -------------------------------------------------------------------

// PushabilityRequest

// required float object_radians = 4;
inline bool PushabilityRequest::has_object_radians() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushabilityRequest::set_has_object_radians() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushabilityRequest::clear_has_object_radians() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushabilityRequest::clear_object_radians() {
  object_radians_ = 0;
  clear_has_object_radians();
}
inline float PushabilityRequest::object_radians() const {
  // @@protoc_insertion_point(field_get:oracle_communication.PushabilityRequest.object_radians)
  return object_radians_;
}
inline void PushabilityRequest::set_object_radians(float value) {
  set_has_object_radians();
  object_radians_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.PushabilityRequest.object_radians)
}

// required float object_relative_x_prime = 5;
inline bool PushabilityRequest::has_object_relative_x_prime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushabilityRequest::set_has_object_relative_x_prime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushabilityRequest::clear_has_object_relative_x_prime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushabilityRequest::clear_object_relative_x_prime() {
  object_relative_x_prime_ = 0;
  clear_has_object_relative_x_prime();
}
inline float PushabilityRequest::object_relative_x_prime() const {
  // @@protoc_insertion_point(field_get:oracle_communication.PushabilityRequest.object_relative_x_prime)
  return object_relative_x_prime_;
}
inline void PushabilityRequest::set_object_relative_x_prime(float value) {
  set_has_object_relative_x_prime();
  object_relative_x_prime_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.PushabilityRequest.object_relative_x_prime)
}

// required float object_relative_y_prime = 6;
inline bool PushabilityRequest::has_object_relative_y_prime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PushabilityRequest::set_has_object_relative_y_prime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PushabilityRequest::clear_has_object_relative_y_prime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PushabilityRequest::clear_object_relative_y_prime() {
  object_relative_y_prime_ = 0;
  clear_has_object_relative_y_prime();
}
inline float PushabilityRequest::object_relative_y_prime() const {
  // @@protoc_insertion_point(field_get:oracle_communication.PushabilityRequest.object_relative_y_prime)
  return object_relative_y_prime_;
}
inline void PushabilityRequest::set_object_relative_y_prime(float value) {
  set_has_object_relative_y_prime();
  object_relative_y_prime_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.PushabilityRequest.object_relative_y_prime)
}

// required float object_radians_prime = 7;
inline bool PushabilityRequest::has_object_radians_prime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PushabilityRequest::set_has_object_radians_prime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PushabilityRequest::clear_has_object_radians_prime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PushabilityRequest::clear_object_radians_prime() {
  object_radians_prime_ = 0;
  clear_has_object_radians_prime();
}
inline float PushabilityRequest::object_radians_prime() const {
  // @@protoc_insertion_point(field_get:oracle_communication.PushabilityRequest.object_radians_prime)
  return object_radians_prime_;
}
inline void PushabilityRequest::set_object_radians_prime(float value) {
  set_has_object_radians_prime();
  object_radians_prime_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.PushabilityRequest.object_radians_prime)
}

// -------------------------------------------------------------------

// PushabilityResponse

// required float mahalanobis = 1;
inline bool PushabilityResponse::has_mahalanobis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushabilityResponse::set_has_mahalanobis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushabilityResponse::clear_has_mahalanobis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushabilityResponse::clear_mahalanobis() {
  mahalanobis_ = 0;
  clear_has_mahalanobis();
}
inline float PushabilityResponse::mahalanobis() const {
  // @@protoc_insertion_point(field_get:oracle_communication.PushabilityResponse.mahalanobis)
  return mahalanobis_;
}
inline void PushabilityResponse::set_mahalanobis(float value) {
  set_has_mahalanobis();
  mahalanobis_ = value;
  // @@protoc_insertion_point(field_set:oracle_communication.PushabilityResponse.mahalanobis)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace oracle_communication

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_oracle_2eproto__INCLUDED
