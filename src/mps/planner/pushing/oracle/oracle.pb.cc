// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oracle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "oracle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace oracle_communication {

namespace {

const ::google::protobuf::Descriptor* ActionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeasibilityRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeasibilityRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeasibilityResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeasibilityResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeasibilitySampleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeasibilitySampleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeasibilitySampleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeasibilitySampleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushabilityRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushabilityRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushabilityResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushabilityResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_oracle_2eproto() {
  protobuf_AddDesc_oracle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "oracle.proto");
  GOOGLE_CHECK(file != NULL);
  ActionRequest_descriptor_ = file->message_type(0);
  static const int ActionRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, robot_relative_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, robot_relative_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, robot_radians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, object_radians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, object_relative_x_prime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, object_relative_y_prime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, object_radians_prime_),
  };
  ActionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionRequest_descriptor_,
      ActionRequest::default_instance_,
      ActionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionRequest));
  ActionResponse_descriptor_ = file->message_type(1);
  static const int ActionResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionResponse, dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionResponse, dy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionResponse, dr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionResponse, t_),
  };
  ActionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionResponse_descriptor_,
      ActionResponse::default_instance_,
      ActionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionResponse));
  FeasibilityRequest_descriptor_ = file->message_type(2);
  static const int FeasibilityRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilityRequest, robot_relative_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilityRequest, robot_relative_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilityRequest, robot_radians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilityRequest, object_radians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilityRequest, object_relative_x_prime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilityRequest, object_relative_y_prime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilityRequest, object_radians_prime_),
  };
  FeasibilityRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeasibilityRequest_descriptor_,
      FeasibilityRequest::default_instance_,
      FeasibilityRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilityRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilityRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeasibilityRequest));
  FeasibilityResponse_descriptor_ = file->message_type(3);
  static const int FeasibilityResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilityResponse, mahalanobis_),
  };
  FeasibilityResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeasibilityResponse_descriptor_,
      FeasibilityResponse::default_instance_,
      FeasibilityResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilityResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilityResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeasibilityResponse));
  FeasibilitySampleRequest_descriptor_ = file->message_type(4);
  static const int FeasibilitySampleRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilitySampleRequest, object_radians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilitySampleRequest, object_relative_x_prime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilitySampleRequest, object_relative_y_prime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilitySampleRequest, object_radians_prime_),
  };
  FeasibilitySampleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeasibilitySampleRequest_descriptor_,
      FeasibilitySampleRequest::default_instance_,
      FeasibilitySampleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilitySampleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilitySampleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeasibilitySampleRequest));
  FeasibilitySampleResponse_descriptor_ = file->message_type(5);
  static const int FeasibilitySampleResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilitySampleResponse, robot_relative_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilitySampleResponse, robot_relative_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilitySampleResponse, robot_radians_),
  };
  FeasibilitySampleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeasibilitySampleResponse_descriptor_,
      FeasibilitySampleResponse::default_instance_,
      FeasibilitySampleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilitySampleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibilitySampleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeasibilitySampleResponse));
  PushabilityRequest_descriptor_ = file->message_type(6);
  static const int PushabilityRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushabilityRequest, object_radians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushabilityRequest, object_relative_x_prime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushabilityRequest, object_relative_y_prime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushabilityRequest, object_radians_prime_),
  };
  PushabilityRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushabilityRequest_descriptor_,
      PushabilityRequest::default_instance_,
      PushabilityRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushabilityRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushabilityRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushabilityRequest));
  PushabilityResponse_descriptor_ = file->message_type(7);
  static const int PushabilityResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushabilityResponse, mahalanobis_),
  };
  PushabilityResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushabilityResponse_descriptor_,
      PushabilityResponse::default_instance_,
      PushabilityResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushabilityResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushabilityResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushabilityResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_oracle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionRequest_descriptor_, &ActionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionResponse_descriptor_, &ActionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeasibilityRequest_descriptor_, &FeasibilityRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeasibilityResponse_descriptor_, &FeasibilityResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeasibilitySampleRequest_descriptor_, &FeasibilitySampleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeasibilitySampleResponse_descriptor_, &FeasibilitySampleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushabilityRequest_descriptor_, &PushabilityRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushabilityResponse_descriptor_, &PushabilityResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_oracle_2eproto() {
  delete ActionRequest::default_instance_;
  delete ActionRequest_reflection_;
  delete ActionResponse::default_instance_;
  delete ActionResponse_reflection_;
  delete FeasibilityRequest::default_instance_;
  delete FeasibilityRequest_reflection_;
  delete FeasibilityResponse::default_instance_;
  delete FeasibilityResponse_reflection_;
  delete FeasibilitySampleRequest::default_instance_;
  delete FeasibilitySampleRequest_reflection_;
  delete FeasibilitySampleResponse::default_instance_;
  delete FeasibilitySampleResponse_reflection_;
  delete PushabilityRequest::default_instance_;
  delete PushabilityRequest_reflection_;
  delete PushabilityResponse::default_instance_;
  delete PushabilityResponse_reflection_;
}

void protobuf_AddDesc_oracle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014oracle.proto\022\024oracle_communication\"\322\001\n"
    "\rActionRequest\022\030\n\020robot_relative_x\030\001 \002(\002"
    "\022\030\n\020robot_relative_y\030\002 \002(\002\022\025\n\rrobot_radi"
    "ans\030\003 \002(\002\022\026\n\016object_radians\030\004 \002(\002\022\037\n\027obj"
    "ect_relative_x_prime\030\005 \002(\002\022\037\n\027object_rel"
    "ative_y_prime\030\006 \002(\002\022\034\n\024object_radians_pr"
    "ime\030\007 \002(\002\"\?\n\016ActionResponse\022\n\n\002dx\030\001 \002(\002\022"
    "\n\n\002dy\030\002 \002(\002\022\n\n\002dr\030\003 \002(\002\022\t\n\001t\030\004 \002(\002\"\327\001\n\022F"
    "easibilityRequest\022\030\n\020robot_relative_x\030\001 "
    "\002(\002\022\030\n\020robot_relative_y\030\002 \002(\002\022\025\n\rrobot_r"
    "adians\030\003 \002(\002\022\026\n\016object_radians\030\004 \002(\002\022\037\n\027"
    "object_relative_x_prime\030\005 \002(\002\022\037\n\027object_"
    "relative_y_prime\030\006 \002(\002\022\034\n\024object_radians"
    "_prime\030\007 \002(\002\"*\n\023FeasibilityResponse\022\023\n\013m"
    "ahalanobis\030\001 \002(\002\"\222\001\n\030FeasibilitySampleRe"
    "quest\022\026\n\016object_radians\030\001 \002(\002\022\037\n\027object_"
    "relative_x_prime\030\002 \002(\002\022\037\n\027object_relativ"
    "e_y_prime\030\003 \002(\002\022\034\n\024object_radians_prime\030"
    "\004 \002(\002\"f\n\031FeasibilitySampleResponse\022\030\n\020ro"
    "bot_relative_x\030\001 \002(\002\022\030\n\020robot_relative_y"
    "\030\002 \002(\002\022\025\n\rrobot_radians\030\003 \002(\002\"\214\001\n\022Pushab"
    "ilityRequest\022\026\n\016object_radians\030\004 \002(\002\022\037\n\027"
    "object_relative_x_prime\030\005 \002(\002\022\037\n\027object_"
    "relative_y_prime\030\006 \002(\002\022\034\n\024object_radians"
    "_prime\030\007 \002(\002\"*\n\023PushabilityResponse\022\023\n\013m"
    "ahalanobis\030\001 \002(\002", 1016);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "oracle.proto", &protobuf_RegisterTypes);
  ActionRequest::default_instance_ = new ActionRequest();
  ActionResponse::default_instance_ = new ActionResponse();
  FeasibilityRequest::default_instance_ = new FeasibilityRequest();
  FeasibilityResponse::default_instance_ = new FeasibilityResponse();
  FeasibilitySampleRequest::default_instance_ = new FeasibilitySampleRequest();
  FeasibilitySampleResponse::default_instance_ = new FeasibilitySampleResponse();
  PushabilityRequest::default_instance_ = new PushabilityRequest();
  PushabilityResponse::default_instance_ = new PushabilityResponse();
  ActionRequest::default_instance_->InitAsDefaultInstance();
  ActionResponse::default_instance_->InitAsDefaultInstance();
  FeasibilityRequest::default_instance_->InitAsDefaultInstance();
  FeasibilityResponse::default_instance_->InitAsDefaultInstance();
  FeasibilitySampleRequest::default_instance_->InitAsDefaultInstance();
  FeasibilitySampleResponse::default_instance_->InitAsDefaultInstance();
  PushabilityRequest::default_instance_->InitAsDefaultInstance();
  PushabilityResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_oracle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_oracle_2eproto {
  StaticDescriptorInitializer_oracle_2eproto() {
    protobuf_AddDesc_oracle_2eproto();
  }
} static_descriptor_initializer_oracle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ActionRequest::kRobotRelativeXFieldNumber;
const int ActionRequest::kRobotRelativeYFieldNumber;
const int ActionRequest::kRobotRadiansFieldNumber;
const int ActionRequest::kObjectRadiansFieldNumber;
const int ActionRequest::kObjectRelativeXPrimeFieldNumber;
const int ActionRequest::kObjectRelativeYPrimeFieldNumber;
const int ActionRequest::kObjectRadiansPrimeFieldNumber;
#endif  // !_MSC_VER

ActionRequest::ActionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:oracle_communication.ActionRequest)
}

void ActionRequest::InitAsDefaultInstance() {
}

ActionRequest::ActionRequest(const ActionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:oracle_communication.ActionRequest)
}

void ActionRequest::SharedCtor() {
  _cached_size_ = 0;
  robot_relative_x_ = 0;
  robot_relative_y_ = 0;
  robot_radians_ = 0;
  object_radians_ = 0;
  object_relative_x_prime_ = 0;
  object_relative_y_prime_ = 0;
  object_radians_prime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionRequest::~ActionRequest() {
  // @@protoc_insertion_point(destructor:oracle_communication.ActionRequest)
  SharedDtor();
}

void ActionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionRequest_descriptor_;
}

const ActionRequest& ActionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oracle_2eproto();
  return *default_instance_;
}

ActionRequest* ActionRequest::default_instance_ = NULL;

ActionRequest* ActionRequest::New() const {
  return new ActionRequest;
}

void ActionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(robot_relative_x_, object_radians_prime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oracle_communication.ActionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float robot_relative_x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &robot_relative_x_)));
          set_has_robot_relative_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_robot_relative_y;
        break;
      }

      // required float robot_relative_y = 2;
      case 2: {
        if (tag == 21) {
         parse_robot_relative_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &robot_relative_y_)));
          set_has_robot_relative_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_robot_radians;
        break;
      }

      // required float robot_radians = 3;
      case 3: {
        if (tag == 29) {
         parse_robot_radians:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &robot_radians_)));
          set_has_robot_radians();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_object_radians;
        break;
      }

      // required float object_radians = 4;
      case 4: {
        if (tag == 37) {
         parse_object_radians:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_radians_)));
          set_has_object_radians();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_object_relative_x_prime;
        break;
      }

      // required float object_relative_x_prime = 5;
      case 5: {
        if (tag == 45) {
         parse_object_relative_x_prime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_relative_x_prime_)));
          set_has_object_relative_x_prime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_object_relative_y_prime;
        break;
      }

      // required float object_relative_y_prime = 6;
      case 6: {
        if (tag == 53) {
         parse_object_relative_y_prime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_relative_y_prime_)));
          set_has_object_relative_y_prime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_object_radians_prime;
        break;
      }

      // required float object_radians_prime = 7;
      case 7: {
        if (tag == 61) {
         parse_object_radians_prime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_radians_prime_)));
          set_has_object_radians_prime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oracle_communication.ActionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oracle_communication.ActionRequest)
  return false;
#undef DO_
}

void ActionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oracle_communication.ActionRequest)
  // required float robot_relative_x = 1;
  if (has_robot_relative_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->robot_relative_x(), output);
  }

  // required float robot_relative_y = 2;
  if (has_robot_relative_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->robot_relative_y(), output);
  }

  // required float robot_radians = 3;
  if (has_robot_radians()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->robot_radians(), output);
  }

  // required float object_radians = 4;
  if (has_object_radians()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->object_radians(), output);
  }

  // required float object_relative_x_prime = 5;
  if (has_object_relative_x_prime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->object_relative_x_prime(), output);
  }

  // required float object_relative_y_prime = 6;
  if (has_object_relative_y_prime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->object_relative_y_prime(), output);
  }

  // required float object_radians_prime = 7;
  if (has_object_radians_prime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->object_radians_prime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oracle_communication.ActionRequest)
}

::google::protobuf::uint8* ActionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oracle_communication.ActionRequest)
  // required float robot_relative_x = 1;
  if (has_robot_relative_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->robot_relative_x(), target);
  }

  // required float robot_relative_y = 2;
  if (has_robot_relative_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->robot_relative_y(), target);
  }

  // required float robot_radians = 3;
  if (has_robot_radians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->robot_radians(), target);
  }

  // required float object_radians = 4;
  if (has_object_radians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->object_radians(), target);
  }

  // required float object_relative_x_prime = 5;
  if (has_object_relative_x_prime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->object_relative_x_prime(), target);
  }

  // required float object_relative_y_prime = 6;
  if (has_object_relative_y_prime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->object_relative_y_prime(), target);
  }

  // required float object_radians_prime = 7;
  if (has_object_radians_prime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->object_radians_prime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oracle_communication.ActionRequest)
  return target;
}

int ActionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float robot_relative_x = 1;
    if (has_robot_relative_x()) {
      total_size += 1 + 4;
    }

    // required float robot_relative_y = 2;
    if (has_robot_relative_y()) {
      total_size += 1 + 4;
    }

    // required float robot_radians = 3;
    if (has_robot_radians()) {
      total_size += 1 + 4;
    }

    // required float object_radians = 4;
    if (has_object_radians()) {
      total_size += 1 + 4;
    }

    // required float object_relative_x_prime = 5;
    if (has_object_relative_x_prime()) {
      total_size += 1 + 4;
    }

    // required float object_relative_y_prime = 6;
    if (has_object_relative_y_prime()) {
      total_size += 1 + 4;
    }

    // required float object_radians_prime = 7;
    if (has_object_radians_prime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionRequest::MergeFrom(const ActionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot_relative_x()) {
      set_robot_relative_x(from.robot_relative_x());
    }
    if (from.has_robot_relative_y()) {
      set_robot_relative_y(from.robot_relative_y());
    }
    if (from.has_robot_radians()) {
      set_robot_radians(from.robot_radians());
    }
    if (from.has_object_radians()) {
      set_object_radians(from.object_radians());
    }
    if (from.has_object_relative_x_prime()) {
      set_object_relative_x_prime(from.object_relative_x_prime());
    }
    if (from.has_object_relative_y_prime()) {
      set_object_relative_y_prime(from.object_relative_y_prime());
    }
    if (from.has_object_radians_prime()) {
      set_object_radians_prime(from.object_radians_prime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionRequest::CopyFrom(const ActionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ActionRequest::Swap(ActionRequest* other) {
  if (other != this) {
    std::swap(robot_relative_x_, other->robot_relative_x_);
    std::swap(robot_relative_y_, other->robot_relative_y_);
    std::swap(robot_radians_, other->robot_radians_);
    std::swap(object_radians_, other->object_radians_);
    std::swap(object_relative_x_prime_, other->object_relative_x_prime_);
    std::swap(object_relative_y_prime_, other->object_relative_y_prime_);
    std::swap(object_radians_prime_, other->object_radians_prime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionRequest_descriptor_;
  metadata.reflection = ActionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionResponse::kDxFieldNumber;
const int ActionResponse::kDyFieldNumber;
const int ActionResponse::kDrFieldNumber;
const int ActionResponse::kTFieldNumber;
#endif  // !_MSC_VER

ActionResponse::ActionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:oracle_communication.ActionResponse)
}

void ActionResponse::InitAsDefaultInstance() {
}

ActionResponse::ActionResponse(const ActionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:oracle_communication.ActionResponse)
}

void ActionResponse::SharedCtor() {
  _cached_size_ = 0;
  dx_ = 0;
  dy_ = 0;
  dr_ = 0;
  t_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionResponse::~ActionResponse() {
  // @@protoc_insertion_point(destructor:oracle_communication.ActionResponse)
  SharedDtor();
}

void ActionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionResponse_descriptor_;
}

const ActionResponse& ActionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oracle_2eproto();
  return *default_instance_;
}

ActionResponse* ActionResponse::default_instance_ = NULL;

ActionResponse* ActionResponse::New() const {
  return new ActionResponse;
}

void ActionResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActionResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dx_, t_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oracle_communication.ActionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float dx = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dx_)));
          set_has_dx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_dy;
        break;
      }

      // required float dy = 2;
      case 2: {
        if (tag == 21) {
         parse_dy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dy_)));
          set_has_dy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_dr;
        break;
      }

      // required float dr = 3;
      case 3: {
        if (tag == 29) {
         parse_dr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dr_)));
          set_has_dr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_t;
        break;
      }

      // required float t = 4;
      case 4: {
        if (tag == 37) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oracle_communication.ActionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oracle_communication.ActionResponse)
  return false;
#undef DO_
}

void ActionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oracle_communication.ActionResponse)
  // required float dx = 1;
  if (has_dx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dx(), output);
  }

  // required float dy = 2;
  if (has_dy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dy(), output);
  }

  // required float dr = 3;
  if (has_dr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dr(), output);
  }

  // required float t = 4;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->t(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oracle_communication.ActionResponse)
}

::google::protobuf::uint8* ActionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oracle_communication.ActionResponse)
  // required float dx = 1;
  if (has_dx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dx(), target);
  }

  // required float dy = 2;
  if (has_dy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dy(), target);
  }

  // required float dr = 3;
  if (has_dr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dr(), target);
  }

  // required float t = 4;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->t(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oracle_communication.ActionResponse)
  return target;
}

int ActionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float dx = 1;
    if (has_dx()) {
      total_size += 1 + 4;
    }

    // required float dy = 2;
    if (has_dy()) {
      total_size += 1 + 4;
    }

    // required float dr = 3;
    if (has_dr()) {
      total_size += 1 + 4;
    }

    // required float t = 4;
    if (has_t()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionResponse::MergeFrom(const ActionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dx()) {
      set_dx(from.dx());
    }
    if (from.has_dy()) {
      set_dy(from.dy());
    }
    if (from.has_dr()) {
      set_dr(from.dr());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionResponse::CopyFrom(const ActionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ActionResponse::Swap(ActionResponse* other) {
  if (other != this) {
    std::swap(dx_, other->dx_);
    std::swap(dy_, other->dy_);
    std::swap(dr_, other->dr_);
    std::swap(t_, other->t_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionResponse_descriptor_;
  metadata.reflection = ActionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeasibilityRequest::kRobotRelativeXFieldNumber;
const int FeasibilityRequest::kRobotRelativeYFieldNumber;
const int FeasibilityRequest::kRobotRadiansFieldNumber;
const int FeasibilityRequest::kObjectRadiansFieldNumber;
const int FeasibilityRequest::kObjectRelativeXPrimeFieldNumber;
const int FeasibilityRequest::kObjectRelativeYPrimeFieldNumber;
const int FeasibilityRequest::kObjectRadiansPrimeFieldNumber;
#endif  // !_MSC_VER

FeasibilityRequest::FeasibilityRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:oracle_communication.FeasibilityRequest)
}

void FeasibilityRequest::InitAsDefaultInstance() {
}

FeasibilityRequest::FeasibilityRequest(const FeasibilityRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:oracle_communication.FeasibilityRequest)
}

void FeasibilityRequest::SharedCtor() {
  _cached_size_ = 0;
  robot_relative_x_ = 0;
  robot_relative_y_ = 0;
  robot_radians_ = 0;
  object_radians_ = 0;
  object_relative_x_prime_ = 0;
  object_relative_y_prime_ = 0;
  object_radians_prime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeasibilityRequest::~FeasibilityRequest() {
  // @@protoc_insertion_point(destructor:oracle_communication.FeasibilityRequest)
  SharedDtor();
}

void FeasibilityRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeasibilityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeasibilityRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeasibilityRequest_descriptor_;
}

const FeasibilityRequest& FeasibilityRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oracle_2eproto();
  return *default_instance_;
}

FeasibilityRequest* FeasibilityRequest::default_instance_ = NULL;

FeasibilityRequest* FeasibilityRequest::New() const {
  return new FeasibilityRequest;
}

void FeasibilityRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FeasibilityRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(robot_relative_x_, object_radians_prime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeasibilityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oracle_communication.FeasibilityRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float robot_relative_x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &robot_relative_x_)));
          set_has_robot_relative_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_robot_relative_y;
        break;
      }

      // required float robot_relative_y = 2;
      case 2: {
        if (tag == 21) {
         parse_robot_relative_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &robot_relative_y_)));
          set_has_robot_relative_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_robot_radians;
        break;
      }

      // required float robot_radians = 3;
      case 3: {
        if (tag == 29) {
         parse_robot_radians:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &robot_radians_)));
          set_has_robot_radians();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_object_radians;
        break;
      }

      // required float object_radians = 4;
      case 4: {
        if (tag == 37) {
         parse_object_radians:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_radians_)));
          set_has_object_radians();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_object_relative_x_prime;
        break;
      }

      // required float object_relative_x_prime = 5;
      case 5: {
        if (tag == 45) {
         parse_object_relative_x_prime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_relative_x_prime_)));
          set_has_object_relative_x_prime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_object_relative_y_prime;
        break;
      }

      // required float object_relative_y_prime = 6;
      case 6: {
        if (tag == 53) {
         parse_object_relative_y_prime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_relative_y_prime_)));
          set_has_object_relative_y_prime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_object_radians_prime;
        break;
      }

      // required float object_radians_prime = 7;
      case 7: {
        if (tag == 61) {
         parse_object_radians_prime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_radians_prime_)));
          set_has_object_radians_prime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oracle_communication.FeasibilityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oracle_communication.FeasibilityRequest)
  return false;
#undef DO_
}

void FeasibilityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oracle_communication.FeasibilityRequest)
  // required float robot_relative_x = 1;
  if (has_robot_relative_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->robot_relative_x(), output);
  }

  // required float robot_relative_y = 2;
  if (has_robot_relative_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->robot_relative_y(), output);
  }

  // required float robot_radians = 3;
  if (has_robot_radians()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->robot_radians(), output);
  }

  // required float object_radians = 4;
  if (has_object_radians()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->object_radians(), output);
  }

  // required float object_relative_x_prime = 5;
  if (has_object_relative_x_prime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->object_relative_x_prime(), output);
  }

  // required float object_relative_y_prime = 6;
  if (has_object_relative_y_prime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->object_relative_y_prime(), output);
  }

  // required float object_radians_prime = 7;
  if (has_object_radians_prime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->object_radians_prime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oracle_communication.FeasibilityRequest)
}

::google::protobuf::uint8* FeasibilityRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oracle_communication.FeasibilityRequest)
  // required float robot_relative_x = 1;
  if (has_robot_relative_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->robot_relative_x(), target);
  }

  // required float robot_relative_y = 2;
  if (has_robot_relative_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->robot_relative_y(), target);
  }

  // required float robot_radians = 3;
  if (has_robot_radians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->robot_radians(), target);
  }

  // required float object_radians = 4;
  if (has_object_radians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->object_radians(), target);
  }

  // required float object_relative_x_prime = 5;
  if (has_object_relative_x_prime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->object_relative_x_prime(), target);
  }

  // required float object_relative_y_prime = 6;
  if (has_object_relative_y_prime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->object_relative_y_prime(), target);
  }

  // required float object_radians_prime = 7;
  if (has_object_radians_prime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->object_radians_prime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oracle_communication.FeasibilityRequest)
  return target;
}

int FeasibilityRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float robot_relative_x = 1;
    if (has_robot_relative_x()) {
      total_size += 1 + 4;
    }

    // required float robot_relative_y = 2;
    if (has_robot_relative_y()) {
      total_size += 1 + 4;
    }

    // required float robot_radians = 3;
    if (has_robot_radians()) {
      total_size += 1 + 4;
    }

    // required float object_radians = 4;
    if (has_object_radians()) {
      total_size += 1 + 4;
    }

    // required float object_relative_x_prime = 5;
    if (has_object_relative_x_prime()) {
      total_size += 1 + 4;
    }

    // required float object_relative_y_prime = 6;
    if (has_object_relative_y_prime()) {
      total_size += 1 + 4;
    }

    // required float object_radians_prime = 7;
    if (has_object_radians_prime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeasibilityRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeasibilityRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeasibilityRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeasibilityRequest::MergeFrom(const FeasibilityRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot_relative_x()) {
      set_robot_relative_x(from.robot_relative_x());
    }
    if (from.has_robot_relative_y()) {
      set_robot_relative_y(from.robot_relative_y());
    }
    if (from.has_robot_radians()) {
      set_robot_radians(from.robot_radians());
    }
    if (from.has_object_radians()) {
      set_object_radians(from.object_radians());
    }
    if (from.has_object_relative_x_prime()) {
      set_object_relative_x_prime(from.object_relative_x_prime());
    }
    if (from.has_object_relative_y_prime()) {
      set_object_relative_y_prime(from.object_relative_y_prime());
    }
    if (from.has_object_radians_prime()) {
      set_object_radians_prime(from.object_radians_prime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeasibilityRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeasibilityRequest::CopyFrom(const FeasibilityRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeasibilityRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void FeasibilityRequest::Swap(FeasibilityRequest* other) {
  if (other != this) {
    std::swap(robot_relative_x_, other->robot_relative_x_);
    std::swap(robot_relative_y_, other->robot_relative_y_);
    std::swap(robot_radians_, other->robot_radians_);
    std::swap(object_radians_, other->object_radians_);
    std::swap(object_relative_x_prime_, other->object_relative_x_prime_);
    std::swap(object_relative_y_prime_, other->object_relative_y_prime_);
    std::swap(object_radians_prime_, other->object_radians_prime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeasibilityRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeasibilityRequest_descriptor_;
  metadata.reflection = FeasibilityRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeasibilityResponse::kMahalanobisFieldNumber;
#endif  // !_MSC_VER

FeasibilityResponse::FeasibilityResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:oracle_communication.FeasibilityResponse)
}

void FeasibilityResponse::InitAsDefaultInstance() {
}

FeasibilityResponse::FeasibilityResponse(const FeasibilityResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:oracle_communication.FeasibilityResponse)
}

void FeasibilityResponse::SharedCtor() {
  _cached_size_ = 0;
  mahalanobis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeasibilityResponse::~FeasibilityResponse() {
  // @@protoc_insertion_point(destructor:oracle_communication.FeasibilityResponse)
  SharedDtor();
}

void FeasibilityResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeasibilityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeasibilityResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeasibilityResponse_descriptor_;
}

const FeasibilityResponse& FeasibilityResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oracle_2eproto();
  return *default_instance_;
}

FeasibilityResponse* FeasibilityResponse::default_instance_ = NULL;

FeasibilityResponse* FeasibilityResponse::New() const {
  return new FeasibilityResponse;
}

void FeasibilityResponse::Clear() {
  mahalanobis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeasibilityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oracle_communication.FeasibilityResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float mahalanobis = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mahalanobis_)));
          set_has_mahalanobis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oracle_communication.FeasibilityResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oracle_communication.FeasibilityResponse)
  return false;
#undef DO_
}

void FeasibilityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oracle_communication.FeasibilityResponse)
  // required float mahalanobis = 1;
  if (has_mahalanobis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->mahalanobis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oracle_communication.FeasibilityResponse)
}

::google::protobuf::uint8* FeasibilityResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oracle_communication.FeasibilityResponse)
  // required float mahalanobis = 1;
  if (has_mahalanobis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->mahalanobis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oracle_communication.FeasibilityResponse)
  return target;
}

int FeasibilityResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float mahalanobis = 1;
    if (has_mahalanobis()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeasibilityResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeasibilityResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeasibilityResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeasibilityResponse::MergeFrom(const FeasibilityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mahalanobis()) {
      set_mahalanobis(from.mahalanobis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeasibilityResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeasibilityResponse::CopyFrom(const FeasibilityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeasibilityResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FeasibilityResponse::Swap(FeasibilityResponse* other) {
  if (other != this) {
    std::swap(mahalanobis_, other->mahalanobis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeasibilityResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeasibilityResponse_descriptor_;
  metadata.reflection = FeasibilityResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeasibilitySampleRequest::kObjectRadiansFieldNumber;
const int FeasibilitySampleRequest::kObjectRelativeXPrimeFieldNumber;
const int FeasibilitySampleRequest::kObjectRelativeYPrimeFieldNumber;
const int FeasibilitySampleRequest::kObjectRadiansPrimeFieldNumber;
#endif  // !_MSC_VER

FeasibilitySampleRequest::FeasibilitySampleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:oracle_communication.FeasibilitySampleRequest)
}

void FeasibilitySampleRequest::InitAsDefaultInstance() {
}

FeasibilitySampleRequest::FeasibilitySampleRequest(const FeasibilitySampleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:oracle_communication.FeasibilitySampleRequest)
}

void FeasibilitySampleRequest::SharedCtor() {
  _cached_size_ = 0;
  object_radians_ = 0;
  object_relative_x_prime_ = 0;
  object_relative_y_prime_ = 0;
  object_radians_prime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeasibilitySampleRequest::~FeasibilitySampleRequest() {
  // @@protoc_insertion_point(destructor:oracle_communication.FeasibilitySampleRequest)
  SharedDtor();
}

void FeasibilitySampleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeasibilitySampleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeasibilitySampleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeasibilitySampleRequest_descriptor_;
}

const FeasibilitySampleRequest& FeasibilitySampleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oracle_2eproto();
  return *default_instance_;
}

FeasibilitySampleRequest* FeasibilitySampleRequest::default_instance_ = NULL;

FeasibilitySampleRequest* FeasibilitySampleRequest::New() const {
  return new FeasibilitySampleRequest;
}

void FeasibilitySampleRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FeasibilitySampleRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(object_radians_, object_radians_prime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeasibilitySampleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oracle_communication.FeasibilitySampleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float object_radians = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_radians_)));
          set_has_object_radians();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_object_relative_x_prime;
        break;
      }

      // required float object_relative_x_prime = 2;
      case 2: {
        if (tag == 21) {
         parse_object_relative_x_prime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_relative_x_prime_)));
          set_has_object_relative_x_prime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_object_relative_y_prime;
        break;
      }

      // required float object_relative_y_prime = 3;
      case 3: {
        if (tag == 29) {
         parse_object_relative_y_prime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_relative_y_prime_)));
          set_has_object_relative_y_prime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_object_radians_prime;
        break;
      }

      // required float object_radians_prime = 4;
      case 4: {
        if (tag == 37) {
         parse_object_radians_prime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_radians_prime_)));
          set_has_object_radians_prime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oracle_communication.FeasibilitySampleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oracle_communication.FeasibilitySampleRequest)
  return false;
#undef DO_
}

void FeasibilitySampleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oracle_communication.FeasibilitySampleRequest)
  // required float object_radians = 1;
  if (has_object_radians()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->object_radians(), output);
  }

  // required float object_relative_x_prime = 2;
  if (has_object_relative_x_prime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->object_relative_x_prime(), output);
  }

  // required float object_relative_y_prime = 3;
  if (has_object_relative_y_prime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->object_relative_y_prime(), output);
  }

  // required float object_radians_prime = 4;
  if (has_object_radians_prime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->object_radians_prime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oracle_communication.FeasibilitySampleRequest)
}

::google::protobuf::uint8* FeasibilitySampleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oracle_communication.FeasibilitySampleRequest)
  // required float object_radians = 1;
  if (has_object_radians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->object_radians(), target);
  }

  // required float object_relative_x_prime = 2;
  if (has_object_relative_x_prime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->object_relative_x_prime(), target);
  }

  // required float object_relative_y_prime = 3;
  if (has_object_relative_y_prime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->object_relative_y_prime(), target);
  }

  // required float object_radians_prime = 4;
  if (has_object_radians_prime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->object_radians_prime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oracle_communication.FeasibilitySampleRequest)
  return target;
}

int FeasibilitySampleRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float object_radians = 1;
    if (has_object_radians()) {
      total_size += 1 + 4;
    }

    // required float object_relative_x_prime = 2;
    if (has_object_relative_x_prime()) {
      total_size += 1 + 4;
    }

    // required float object_relative_y_prime = 3;
    if (has_object_relative_y_prime()) {
      total_size += 1 + 4;
    }

    // required float object_radians_prime = 4;
    if (has_object_radians_prime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeasibilitySampleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeasibilitySampleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeasibilitySampleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeasibilitySampleRequest::MergeFrom(const FeasibilitySampleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_radians()) {
      set_object_radians(from.object_radians());
    }
    if (from.has_object_relative_x_prime()) {
      set_object_relative_x_prime(from.object_relative_x_prime());
    }
    if (from.has_object_relative_y_prime()) {
      set_object_relative_y_prime(from.object_relative_y_prime());
    }
    if (from.has_object_radians_prime()) {
      set_object_radians_prime(from.object_radians_prime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeasibilitySampleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeasibilitySampleRequest::CopyFrom(const FeasibilitySampleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeasibilitySampleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FeasibilitySampleRequest::Swap(FeasibilitySampleRequest* other) {
  if (other != this) {
    std::swap(object_radians_, other->object_radians_);
    std::swap(object_relative_x_prime_, other->object_relative_x_prime_);
    std::swap(object_relative_y_prime_, other->object_relative_y_prime_);
    std::swap(object_radians_prime_, other->object_radians_prime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeasibilitySampleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeasibilitySampleRequest_descriptor_;
  metadata.reflection = FeasibilitySampleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeasibilitySampleResponse::kRobotRelativeXFieldNumber;
const int FeasibilitySampleResponse::kRobotRelativeYFieldNumber;
const int FeasibilitySampleResponse::kRobotRadiansFieldNumber;
#endif  // !_MSC_VER

FeasibilitySampleResponse::FeasibilitySampleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:oracle_communication.FeasibilitySampleResponse)
}

void FeasibilitySampleResponse::InitAsDefaultInstance() {
}

FeasibilitySampleResponse::FeasibilitySampleResponse(const FeasibilitySampleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:oracle_communication.FeasibilitySampleResponse)
}

void FeasibilitySampleResponse::SharedCtor() {
  _cached_size_ = 0;
  robot_relative_x_ = 0;
  robot_relative_y_ = 0;
  robot_radians_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeasibilitySampleResponse::~FeasibilitySampleResponse() {
  // @@protoc_insertion_point(destructor:oracle_communication.FeasibilitySampleResponse)
  SharedDtor();
}

void FeasibilitySampleResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeasibilitySampleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeasibilitySampleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeasibilitySampleResponse_descriptor_;
}

const FeasibilitySampleResponse& FeasibilitySampleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oracle_2eproto();
  return *default_instance_;
}

FeasibilitySampleResponse* FeasibilitySampleResponse::default_instance_ = NULL;

FeasibilitySampleResponse* FeasibilitySampleResponse::New() const {
  return new FeasibilitySampleResponse;
}

void FeasibilitySampleResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FeasibilitySampleResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(robot_relative_x_, robot_radians_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeasibilitySampleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oracle_communication.FeasibilitySampleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float robot_relative_x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &robot_relative_x_)));
          set_has_robot_relative_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_robot_relative_y;
        break;
      }

      // required float robot_relative_y = 2;
      case 2: {
        if (tag == 21) {
         parse_robot_relative_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &robot_relative_y_)));
          set_has_robot_relative_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_robot_radians;
        break;
      }

      // required float robot_radians = 3;
      case 3: {
        if (tag == 29) {
         parse_robot_radians:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &robot_radians_)));
          set_has_robot_radians();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oracle_communication.FeasibilitySampleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oracle_communication.FeasibilitySampleResponse)
  return false;
#undef DO_
}

void FeasibilitySampleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oracle_communication.FeasibilitySampleResponse)
  // required float robot_relative_x = 1;
  if (has_robot_relative_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->robot_relative_x(), output);
  }

  // required float robot_relative_y = 2;
  if (has_robot_relative_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->robot_relative_y(), output);
  }

  // required float robot_radians = 3;
  if (has_robot_radians()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->robot_radians(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oracle_communication.FeasibilitySampleResponse)
}

::google::protobuf::uint8* FeasibilitySampleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oracle_communication.FeasibilitySampleResponse)
  // required float robot_relative_x = 1;
  if (has_robot_relative_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->robot_relative_x(), target);
  }

  // required float robot_relative_y = 2;
  if (has_robot_relative_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->robot_relative_y(), target);
  }

  // required float robot_radians = 3;
  if (has_robot_radians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->robot_radians(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oracle_communication.FeasibilitySampleResponse)
  return target;
}

int FeasibilitySampleResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float robot_relative_x = 1;
    if (has_robot_relative_x()) {
      total_size += 1 + 4;
    }

    // required float robot_relative_y = 2;
    if (has_robot_relative_y()) {
      total_size += 1 + 4;
    }

    // required float robot_radians = 3;
    if (has_robot_radians()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeasibilitySampleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeasibilitySampleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeasibilitySampleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeasibilitySampleResponse::MergeFrom(const FeasibilitySampleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot_relative_x()) {
      set_robot_relative_x(from.robot_relative_x());
    }
    if (from.has_robot_relative_y()) {
      set_robot_relative_y(from.robot_relative_y());
    }
    if (from.has_robot_radians()) {
      set_robot_radians(from.robot_radians());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeasibilitySampleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeasibilitySampleResponse::CopyFrom(const FeasibilitySampleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeasibilitySampleResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FeasibilitySampleResponse::Swap(FeasibilitySampleResponse* other) {
  if (other != this) {
    std::swap(robot_relative_x_, other->robot_relative_x_);
    std::swap(robot_relative_y_, other->robot_relative_y_);
    std::swap(robot_radians_, other->robot_radians_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeasibilitySampleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeasibilitySampleResponse_descriptor_;
  metadata.reflection = FeasibilitySampleResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushabilityRequest::kObjectRadiansFieldNumber;
const int PushabilityRequest::kObjectRelativeXPrimeFieldNumber;
const int PushabilityRequest::kObjectRelativeYPrimeFieldNumber;
const int PushabilityRequest::kObjectRadiansPrimeFieldNumber;
#endif  // !_MSC_VER

PushabilityRequest::PushabilityRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:oracle_communication.PushabilityRequest)
}

void PushabilityRequest::InitAsDefaultInstance() {
}

PushabilityRequest::PushabilityRequest(const PushabilityRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:oracle_communication.PushabilityRequest)
}

void PushabilityRequest::SharedCtor() {
  _cached_size_ = 0;
  object_radians_ = 0;
  object_relative_x_prime_ = 0;
  object_relative_y_prime_ = 0;
  object_radians_prime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushabilityRequest::~PushabilityRequest() {
  // @@protoc_insertion_point(destructor:oracle_communication.PushabilityRequest)
  SharedDtor();
}

void PushabilityRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PushabilityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushabilityRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushabilityRequest_descriptor_;
}

const PushabilityRequest& PushabilityRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oracle_2eproto();
  return *default_instance_;
}

PushabilityRequest* PushabilityRequest::default_instance_ = NULL;

PushabilityRequest* PushabilityRequest::New() const {
  return new PushabilityRequest;
}

void PushabilityRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushabilityRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(object_radians_, object_radians_prime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushabilityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oracle_communication.PushabilityRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float object_radians = 4;
      case 4: {
        if (tag == 37) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_radians_)));
          set_has_object_radians();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_object_relative_x_prime;
        break;
      }

      // required float object_relative_x_prime = 5;
      case 5: {
        if (tag == 45) {
         parse_object_relative_x_prime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_relative_x_prime_)));
          set_has_object_relative_x_prime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_object_relative_y_prime;
        break;
      }

      // required float object_relative_y_prime = 6;
      case 6: {
        if (tag == 53) {
         parse_object_relative_y_prime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_relative_y_prime_)));
          set_has_object_relative_y_prime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_object_radians_prime;
        break;
      }

      // required float object_radians_prime = 7;
      case 7: {
        if (tag == 61) {
         parse_object_radians_prime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_radians_prime_)));
          set_has_object_radians_prime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oracle_communication.PushabilityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oracle_communication.PushabilityRequest)
  return false;
#undef DO_
}

void PushabilityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oracle_communication.PushabilityRequest)
  // required float object_radians = 4;
  if (has_object_radians()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->object_radians(), output);
  }

  // required float object_relative_x_prime = 5;
  if (has_object_relative_x_prime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->object_relative_x_prime(), output);
  }

  // required float object_relative_y_prime = 6;
  if (has_object_relative_y_prime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->object_relative_y_prime(), output);
  }

  // required float object_radians_prime = 7;
  if (has_object_radians_prime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->object_radians_prime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oracle_communication.PushabilityRequest)
}

::google::protobuf::uint8* PushabilityRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oracle_communication.PushabilityRequest)
  // required float object_radians = 4;
  if (has_object_radians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->object_radians(), target);
  }

  // required float object_relative_x_prime = 5;
  if (has_object_relative_x_prime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->object_relative_x_prime(), target);
  }

  // required float object_relative_y_prime = 6;
  if (has_object_relative_y_prime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->object_relative_y_prime(), target);
  }

  // required float object_radians_prime = 7;
  if (has_object_radians_prime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->object_radians_prime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oracle_communication.PushabilityRequest)
  return target;
}

int PushabilityRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float object_radians = 4;
    if (has_object_radians()) {
      total_size += 1 + 4;
    }

    // required float object_relative_x_prime = 5;
    if (has_object_relative_x_prime()) {
      total_size += 1 + 4;
    }

    // required float object_relative_y_prime = 6;
    if (has_object_relative_y_prime()) {
      total_size += 1 + 4;
    }

    // required float object_radians_prime = 7;
    if (has_object_radians_prime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushabilityRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushabilityRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushabilityRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushabilityRequest::MergeFrom(const PushabilityRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_radians()) {
      set_object_radians(from.object_radians());
    }
    if (from.has_object_relative_x_prime()) {
      set_object_relative_x_prime(from.object_relative_x_prime());
    }
    if (from.has_object_relative_y_prime()) {
      set_object_relative_y_prime(from.object_relative_y_prime());
    }
    if (from.has_object_radians_prime()) {
      set_object_radians_prime(from.object_radians_prime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushabilityRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushabilityRequest::CopyFrom(const PushabilityRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushabilityRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PushabilityRequest::Swap(PushabilityRequest* other) {
  if (other != this) {
    std::swap(object_radians_, other->object_radians_);
    std::swap(object_relative_x_prime_, other->object_relative_x_prime_);
    std::swap(object_relative_y_prime_, other->object_relative_y_prime_);
    std::swap(object_radians_prime_, other->object_radians_prime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushabilityRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushabilityRequest_descriptor_;
  metadata.reflection = PushabilityRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushabilityResponse::kMahalanobisFieldNumber;
#endif  // !_MSC_VER

PushabilityResponse::PushabilityResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:oracle_communication.PushabilityResponse)
}

void PushabilityResponse::InitAsDefaultInstance() {
}

PushabilityResponse::PushabilityResponse(const PushabilityResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:oracle_communication.PushabilityResponse)
}

void PushabilityResponse::SharedCtor() {
  _cached_size_ = 0;
  mahalanobis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushabilityResponse::~PushabilityResponse() {
  // @@protoc_insertion_point(destructor:oracle_communication.PushabilityResponse)
  SharedDtor();
}

void PushabilityResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PushabilityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushabilityResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushabilityResponse_descriptor_;
}

const PushabilityResponse& PushabilityResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oracle_2eproto();
  return *default_instance_;
}

PushabilityResponse* PushabilityResponse::default_instance_ = NULL;

PushabilityResponse* PushabilityResponse::New() const {
  return new PushabilityResponse;
}

void PushabilityResponse::Clear() {
  mahalanobis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushabilityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oracle_communication.PushabilityResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float mahalanobis = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mahalanobis_)));
          set_has_mahalanobis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oracle_communication.PushabilityResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oracle_communication.PushabilityResponse)
  return false;
#undef DO_
}

void PushabilityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oracle_communication.PushabilityResponse)
  // required float mahalanobis = 1;
  if (has_mahalanobis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->mahalanobis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oracle_communication.PushabilityResponse)
}

::google::protobuf::uint8* PushabilityResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oracle_communication.PushabilityResponse)
  // required float mahalanobis = 1;
  if (has_mahalanobis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->mahalanobis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oracle_communication.PushabilityResponse)
  return target;
}

int PushabilityResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float mahalanobis = 1;
    if (has_mahalanobis()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushabilityResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushabilityResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushabilityResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushabilityResponse::MergeFrom(const PushabilityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mahalanobis()) {
      set_mahalanobis(from.mahalanobis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushabilityResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushabilityResponse::CopyFrom(const PushabilityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushabilityResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PushabilityResponse::Swap(PushabilityResponse* other) {
  if (other != this) {
    std::swap(mahalanobis_, other->mahalanobis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushabilityResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushabilityResponse_descriptor_;
  metadata.reflection = PushabilityResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace oracle_communication

// @@protoc_insertion_point(global_scope)
